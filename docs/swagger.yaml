basePath: /api/v1
definitions:
  controller._DeleteUserError:
    properties:
      error:
        example: delete user error
        format: string
        type: string
    type: object
  controller._DeleteUserSuccess:
    properties:
      msg:
        example: success delete user
        format: string
        type: string
    type: object
  controller._GetUserDetailError:
    properties:
      error:
        example: get user detail error
        format: string
        type: string
    type: object
  controller._GetUserDetailSuccess:
    properties:
      data:
        $ref: '#/definitions/mysql.User'
      msg:
        example: success get user detail
        format: string
        type: string
    type: object
  controller._LoginError:
    properties:
      error:
        example: invalidate email format
        format: string
        type: string
    type: object
  controller._LoginSuccess:
    properties:
      msg:
        example: login successfully
        format: string
        type: string
    type: object
  controller._RegisterError:
    properties:
      error:
        example: register error
        format: string
        type: string
    type: object
  controller._RegisterSuccess:
    properties:
      msg:
        example: registration successful
        format: string
        type: string
      token:
        example: bearer token
        format: token string
        type: string
    type: object
  controller._ResponseAddProblems:
    properties:
      code:
        type: string
    type: object
  controller._ResponseAddScore:
    properties:
      msg:
        type: string
      new_score:
        type: integer
    type: object
  controller._ResponseDataString:
    properties:
      data:
        type: string
    type: object
  controller._ResponseError:
    properties:
      error:
        type: string
    type: object
  controller._ResponseGetData:
    properties:
      data:
        items:
          type: string
        type: array
    type: object
  controller._ResponseMsg:
    properties:
      msg:
        type: string
    type: object
  controller._ResponseProblems:
    type: object
  controller._ResponseQuestionDetail:
    type: object
  controller._ResponseSort:
    type: object
  controller._SendCodeError:
    properties:
      error:
        example: invalidate email format
        format: string
        type: string
    type: object
  controller._SendCodeSuccess:
    properties:
      msg:
        example: send verification code successfully
        format: string
        type: string
    type: object
  controller._UpdateUserDetailError:
    properties:
      error:
        example: update user information error
        format: string
        type: string
    type: object
  controller._UpdateUserDetailSuccess:
    properties:
      msg:
        example: success update user information
        format: string
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  mysql.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      last_login_data:
        type: string
      password:
        type: string
      registration_date:
        type: string
      score:
        type: integer
      updatedAt:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
    type: object
host: 127.0.0.1:65533
info:
  contact:
    email: support@swagger.io
    name: Eutop1a
    url: http://www.swagger.io/support
  description: Refactoring
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: OnlineJudge
  version: "1.0"
paths:
  /api/sort:
    post:
      consumes:
      - application/json
      description: 获取所有用户并按分数降序排序
      parameters:
      - description: 执行操作的用户名
        in: formData
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功获取并排序用户列表
          schema:
            $ref: '#/definitions/controller._ResponseSort'
        "403":
          description: Token 已超时
          schema:
            $ref: '#/definitions/controller._ResponseMsg'
        "500":
          description: 数据库查询错误
          schema:
            $ref: '#/definitions/controller._ResponseError'
      summary: 根据用户分数降序排序
  /changeScore:
    post:
      consumes:
      - application/json
      description: 通过用户名和新分数的表单数据，增加用户的总分数，并返回新的总分数
      parameters:
      - description: 用户名
        in: formData
        name: username
        required: true
        type: string
      - description: 要增加的分数
        in: formData
        name: newscore
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 增加分数成功，返回消息和新的总分数
          schema:
            $ref: '#/definitions/controller._ResponseAddScore'
        "403":
          description: Token 已超时
          schema:
            type: string
        "500":
          description: 数据库查询或保存出错
          schema:
            $ref: '#/definitions/controller._ResponseError'
      summary: 增加用户分数
  /judge:
    post:
      consumes:
      - application/json
      description: 通过用户身份、问题ID和代码内容，进行代码评测，并返回评测结果
      parameters:
      - description: 执行操作的用户名
        in: formData
        name: username
        required: true
        type: string
      - description: 要评测的问题ID
        in: formData
        name: problem
        required: true
        type: integer
      - description: 要评测的代码内容
        in: formData
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功进行代码评测
          schema:
            $ref: '#/definitions/controller._ResponseMsg'
        "403":
          description: Token 已超时
          schema:
            $ref: '#/definitions/controller._ResponseMsg'
      summary: 代码评测
  /list:
    post:
      consumes:
      - application/json
      description: 获取所有问题的列表
      parameters:
      - description: 要获取问题列表的用户名
        in: formData
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功获取问题列表
          schema:
            $ref: '#/definitions/controller._ResponseProblems'
        "403":
          description: Token 已超时
          schema:
            $ref: '#/definitions/controller._ResponseMsg'
        "500":
          description: 获取问题列表出错
          schema:
            $ref: '#/definitions/controller._ResponseMsg'
      summary: 获取问题列表
  /login:
    post:
      consumes:
      - multipart/form-data
      description: 用户登录接口
      parameters:
      - description: 用户名
        in: formData
        name: user_name
        required: true
        type: string
      - description: 密码
        in: formData
        name: password
        required: true
        type: string
      - description: 邮箱
        in: formData
        name: email
        required: true
        type: string
      - description: 验证码
        in: formData
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 登录成功
          schema:
            $ref: '#/definitions/controller._LoginSuccess'
        "400":
          description: 用户名不存在或验证码错误
          schema:
            $ref: '#/definitions/controller._LoginError'
        "401":
          description: 验证码过期
          schema:
            $ref: '#/definitions/controller._LoginError'
        "403":
          description: 密码错误
          schema:
            $ref: '#/definitions/controller._LoginError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/controller._LoginError'
      summary: 用户登录
  /problem/:id:
    post:
      consumes:
      - application/json
      description: 通过问题ID和管理员身份，获取指定问题的详细信息
      parameters:
      - description: 执行操作的管理员用户名
        in: formData
        name: _
        required: true
        type: string
      - description: 要获取的问题ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功获取问题详情
          schema:
            $ref: '#/definitions/controller._ResponseQuestionDetail'
        "403":
          description: 获取问题详情出错
          schema:
            $ref: '#/definitions/controller._ResponseMsg'
      summary: 获取问题详情
  /problem/add:
    post:
      consumes:
      - application/json
      description: 通过管理员身份，使用表单数据添加新的问题，并返回操作结果
      parameters:
      - description: 执行操作的管理员用户名
        in: formData
        name: username
        required: true
        type: string
      - description: 问题ID
        in: formData
        name: id
        required: true
        type: string
      - description: 问题标题
        in: formData
        name: title
        required: true
        type: string
      - description: 问题描述
        in: formData
        name: lore
        required: true
        type: string
      - description: 问题标准输入
        in: formData
        name: input
        required: true
        type: string
      - description: 问题标准输出
        in: formData
        name: output
        required: true
        type: string
      - description: 问题提示
        in: formData
        name: tips
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功添加问题
          schema:
            $ref: '#/definitions/controller._ResponseAddProblems'
        "403":
          description: 解析表单数据出错
          schema:
            $ref: '#/definitions/controller._ResponseMsg'
      summary: 添加问题
  /problem/file/:id:
    post:
      consumes:
      - application/json
      description: 通过问题ID，获取指定问题的文件列表
      parameters:
      - description: 要获取文件列表的问题ID
        in: formData
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功获取问题文件列表
          schema:
            $ref: '#/definitions/controller._ResponseGetData'
        "403":
          description: 读取文件列表出错
          schema:
            $ref: '#/definitions/controller._ResponseDataString'
      summary: 获取问题文件列表
  /problem/file/add/:id:
    post:
      consumes:
      - multipart/form-data
      description: 通过管理员身份，使用表单数据上传问题的输入和输出文件，并返回操作结果
      parameters:
      - description: 执行操作的管理员用户名
        in: formData
        name: username
        required: true
        type: string
      - description: 要上传文件的问题ID
        in: path
        name: id
        required: true
        type: string
      - description: 问题输入文件（.in）
        in: formData
        name: input
        required: true
        type: file
      - description: 问题输出文件（.out）
        in: formData
        name: output
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 成功上传问题文件
          schema:
            $ref: '#/definitions/controller._ResponseMsg'
        "400":
          description: 接收或保存文件出错
          schema:
            $ref: '#/definitions/controller._ResponseMsg'
        "403":
          description: Token 已超时或用户非管理员
          schema:
            $ref: '#/definitions/controller._ResponseMsg'
      summary: 上传问题文件
  /register:
    post:
      consumes:
      - multipart/form-data
      description: 用户注册接口
      parameters:
      - description: 用户名
        in: formData
        name: user_name
        required: true
        type: string
      - description: 密码
        in: formData
        name: password
        required: true
        type: string
      - description: 邮箱
        in: formData
        name: email
        required: true
        type: string
      - description: 验证码
        in: formData
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 注册成功
          schema:
            $ref: '#/definitions/controller._RegisterSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller._RegisterError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller._RegisterError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller._RegisterError'
      summary: 用户注册
  /send-email-code:
    post:
      consumes:
      - multipart/form-data
      description: 发送验证码接口
      parameters:
      - description: 邮箱
        in: formData
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 发送验证码成功
          schema:
            $ref: '#/definitions/controller._SendCodeSuccess'
        "400":
          description: 邮箱格式错误
          schema:
            $ref: '#/definitions/controller._SendCodeError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/controller._SendCodeError'
      summary: 发送验证码
  /users/{user_id}:
    delete:
      consumes:
      - multipart/form-data
      description: 删除用户接口
      parameters:
      - description: 用户ID
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            $ref: '#/definitions/controller._DeleteUserSuccess'
        "400":
          description: 参数错误
          schema:
            $ref: '#/definitions/controller._DeleteUserError'
        "403":
          description: 没有此用户ID
          schema:
            $ref: '#/definitions/controller._DeleteUserError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/controller._DeleteUserError'
      summary: 删除用户
    get:
      consumes:
      - multipart/form-data
      description: 获取用户详细信息接口
      parameters:
      - description: 用户ID
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            $ref: '#/definitions/controller._GetUserDetailSuccess'
        "400":
          description: 参数错误
          schema:
            $ref: '#/definitions/controller._GetUserDetailError'
        "403":
          description: 没有此用户ID
          schema:
            $ref: '#/definitions/controller._GetUserDetailError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/controller._GetUserDetailError'
      summary: 获取用户详细信息
    put:
      consumes:
      - multipart/form-data
      description: 更新用户详细信息接口
      parameters:
      - description: 用户ID
        in: formData
        name: user_id
        required: true
        type: string
      - description: 用户密码
        in: formData
        name: password
        type: string
      - description: 用户邮箱
        in: formData
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            $ref: '#/definitions/controller._UpdateUserDetailSuccess'
        "400":
          description: 参数错误
          schema:
            $ref: '#/definitions/controller._UpdateUserDetailError'
        "403":
          description: 没有此用户ID or 验证码错误
          schema:
            $ref: '#/definitions/controller._UpdateUserDetailError'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/controller._UpdateUserDetailError'
      summary: 更新用户详细信息
swagger: "2.0"
